{% extends 'baseWithPublicMenu.html.twig' %}
{% block stylesheets %}
 <link rel="stylesheet" href="{{asset("/assets/css/contact.css")}}"/>
 
{% endblock %}


{% block main %}
{% if message is defined   %}
<div class="thanx">

            {{ message |raw }}
</div>

{% else %}
        <div class="">
            
                    <section class="corps">
                    <div class="aside">
                        <h1>NOUS TROUVER</h1>                    
                        <div>
                            
                            <p>6 rue Charloun Rieu<br>13090 Aix-en-Provence</p>
                        </div>
                        <div class="map">
                            <p><iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2892.7086824653807!2d5.412613015362152!3d43.52926727912575!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x12c98d3fe34d979f%3A0x29f1fe7c2c42f03e!2s6%20Rue%20Charloun%20Rieu%2C%2013090%20Aix-en-Provence!5e0!3m2!1sfr!2sfr!4v1642668466814!5m2!1sfr!2sfr" width="300" height="350"   style="border:0; border-radius: 5%;" allowfullscreen="" loading="lazy"></iframe></p>
                        </div>

                    </div>
                    <article class="partForm">
                        <div>
                        {{ form_start(form, {"attr":{"class": "needs-validation", "novalidate":true}})}}
                        {# For convenience sake of this snippet, store the errors in a variable #}

                                    

                        <div class="aff_form row">
                            {{ form_widget(form.lastname)}}
               
                            {{ form_widget(form.firstname)}}
                               

                            {{ form_widget(form.phone)}}
                       
                            {{ form_widget(form.email)}}
                        

                                {{ form_widget(form.address)}}
                                {{ form_errors(form.address) | raw}}

                                <datalist id="address" />

                                </datalist>
                                <div class="d-flex p-0">
                            <div class=" col">
                            <h5>Vous souhaitez : </h5>
                                {{ form_widget(form.request)}}
                            </div>
                            <div class="col">
                            <h5>Vous êtes : </h5>
                                {{ form_widget(form.entity)}}
                                {{ form_errors(form.entity) | raw}}

                                {{ form_widget(form.firmName)}}
                                {{ form_errors(form.firmName) | raw}}
                            </div> 
                          </div>
<div class="form-floating p-0">
                                {{ form_widget(form.message)}}
                                {{ form_errors(form.message) | raw}}
</div>
                                <div class="rgpd">
                                <p>    
                                {{ form_widget(form.agreements)}}

                                     
                                        <span>J'accepte de communiquer mes coordonnées personnelles qui seront traitées dans le cadre du respect du RGPD et de <a href="{{ path("mentionsLegales")}}">la politique de confidentialité</a> d'Aggrego-Tech.</span>
                                    
                                </p>
                                
                            </div>
                        </div>
            {{ form_widget(form.captcha) }}
            {{ form_errors(form.captcha) | raw}}


            <button class="btn btn-success d-block  p-3 m-2 m-auto mt-5" type="submit">Valider</button>

                        {{ form_end(form)}}

                            </div>                      
                                              
                    </article>
                </section>
            
        </div>
       

{% endif %}
    
    {% endblock %}
    {% block javascripts %}
    <script>function bindChallengeToSubmitButtons(form, reCaptchaId) {
  getSubmitButtons(form).forEach(function (button) {
    button.addEventListener("click ", function (e) {
      e.preventDefault();
      grecaptcha.execute(reCaptchaId);
    });
  });
}

/**
 * Récupère les boutons de soumission à partir du formulaire donné
 */
function getSubmitButtons(form) {
  var buttons = form.querySelectorAll("button, input");
  var submitButtons = [];

  for (var i = 0; i < boutons.longueur; i++) {
    var bouton = boutons[i];
    if (button.getAttribute("type") == "submit") {
      submitButtons.push(button);
    }
  }

  return submitButtons;
}

/**
 * Render the given widget as a reCAPTCHA
 * from the data-type attribute
 */
function renderReCaptcha(widget) {
  var form = widget.closest("form");
  var widgetType = widget.getAttribute("data-type");
  var widgetParameters = {
    sitekey: "{{ gg_recaptcha_site_key }}",
  };

  if (widgetType == "invisible") {
    widgetParameters["callback"] = function () {
      form.submit();
    };
    widgetParameters["size"] = "invisible";
  }

  var widgetId = grecaptcha.render(widget, widgetParameters);

  if (widgetType == "invisible") {
    bindChallengeToSubmitButtons(form, widgetId);
  }
}

/**
 * The callback function executed
 * once all the Google dependencies have loaded
 */
function onGoogleReCaptchaApiLoad() {
  var widgets = document.querySelectorAll('[data-toggle="recaptcha"]');
  for (var i = 0; i < widgets.length; i++) {
    renderReCaptcha(widgets[i]);
  }
}

// Example starter JavaScript for disabling form submissions if there are invalid fields
(function () {
  "use strict";

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  var forms = document.querySelectorAll(".needs-validation");

  // Loop over them and prevent submission
  Array.prototype.slice.call(forms).forEach(function (form) {
    form.addEventListener(
      "submit",
      function (event) {
        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
        }

        form.classList.add("was-validated");
      },
      false
    );
  });
})();

{# let rgpd = document
  .querySelector("#contact_agreements")

let captcha = document.querySelector(".recaptcha-checkbox-border")

  document.addEventListener("click", function (e) {
   if (rgpd.checked && captcha.checked) {
            document.querySelector("[type=submit]").removeAttribute("disabled")
    } else{
      document.querySelector("[type=submit]").setAttribute("disabled", "true");
    }
  }); #}

document.querySelector("#contact_address").addEventListener("keyup",   debounce(function(e){
     fetch("https://api-adresse.data.gouv.fr/search/?q=" + e.target.value +"&autocomplete=0&limit=15", {header: {"Access-Control-Allow-Origin": "*"}}).then(r=>r.json()).then(json=>document.querySelector("#address").innerHTML =  json.features.map(f=>f.properties.label).join("</option><option>")).catch(e=>console.log(e.message))
}))




function debounce(func, timeout = 100){
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => { func.apply(this, args); }, timeout);
  };
}
</script>
    <script type="text/javascript" src="https://www.google.com/recaptcha/api.js?onload=onGoogleReCaptchaApiLoad&render=explicit&hl=fr" async defer></script>


    {% endblock %}
